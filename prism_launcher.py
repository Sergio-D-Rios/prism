#!/usr/bin/env python3

###############################################################################
#####################  UnumScrape - Web Link Scraper ##########################
##########Created by Sergio Rios for Educational Purposes Only ################
###############################################################################

import argparse
from argparse import RawDescriptionHelpFormatter
from prism.prism import Prism
import os
import sys

#Helper/Description Strings for the project
manual_descriptions = {
    "proj_description": 'prism is an ICS Network Analysis tool that is meant' 
    ' to provide classification and awareness of network assets to users.',

    "pcap_file": 'Used to specify the input PCAP file prism will analyze.',

    "protocol_filter": 'Used to specify a list of known industrial protocols.' 
    ' This list will then be used to filter the packets used for classification' 
    ' by prism. prism uses MODBUS as a protocol filter by default.',

    "input": 'Used in combination with the visualization flag -v, in order to'
    ' load a previously generated or custom machine list into prism. Passed in'
    ' file should be a JSON file containing a list of machine objects',

    "output": 'Used to generate a JSON output file containing the now' 
    ' classified network topology from the used PCAP file. Type in the desired' 
    ' file name after the flag. Set to false by default.',

    "visualize": 'Used to generate a visualization of the classified network' 
    ' topology generated by prism.'


}

# Argument Parsing and manual definition
def argumentParser() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description=manual_descriptions['proj_description'],
        formatter_class=RawDescriptionHelpFormatter)

    parser.add_argument('-pc','--pcap_file', type=str, action='store',
                        help=manual_descriptions['pcap_file'])

    parser.add_argument('-pf', '--protocol_filter', nargs='+', action='store',
                        help=manual_descriptions['protocol_filter'])

    parser.add_argument('-i', '--input_file', type=str, action='store',
                        help=manual_descriptions['input'])
        
    parser.add_argument('-o', '--output_file', type=str, action='store',
                         help=manual_descriptions['output'])
                
    parser.add_argument('-v', '--visualize', action='store_true',
                        help=manual_descriptions['visualize'])

    return parser.parse_args()


def main():
    args = argumentParser()
    prism = Prism(**vars(args))
    prism.launch()
    
if __name__ == '__main__':
    main()